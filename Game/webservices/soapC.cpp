/* soapC.cpp
   Generated by gSOAP 2.8.6 from WsApi.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.6 2011-12-18 18:18:16 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_ns1__Torneio:
		return soap_in_ns1__Torneio(soap, NULL, NULL, "ns1:Torneio");
	case SOAP_TYPE_ns1__ArrayOfTorneio:
		return soap_in_ns1__ArrayOfTorneio(soap, NULL, NULL, "ns1:ArrayOfTorneio");
	case SOAP_TYPE_ns1__Classificacao:
		return soap_in_ns1__Classificacao(soap, NULL, NULL, "ns1:Classificacao");
	case SOAP_TYPE_ns1__ArrayOfClassificacao:
		return soap_in_ns1__ArrayOfClassificacao(soap, NULL, NULL, "ns1:ArrayOfClassificacao");
	case SOAP_TYPE_PointerTo_ns1__loginResponse:
		return soap_in_PointerTo_ns1__loginResponse(soap, NULL, NULL, "ns1:loginResponse");
	case SOAP_TYPE_PointerTo_ns1__login:
		return soap_in_PointerTo_ns1__login(soap, NULL, NULL, "ns1:login");
	case SOAP_TYPE_PointerTo_ns1__getTorneioResponse:
		return soap_in_PointerTo_ns1__getTorneioResponse(soap, NULL, NULL, "ns1:getTorneioResponse");
	case SOAP_TYPE_PointerTo_ns1__getTorneio:
		return soap_in_PointerTo_ns1__getTorneio(soap, NULL, NULL, "ns1:getTorneio");
	case SOAP_TYPE_PointerTo_ns1__setResultadosResponse:
		return soap_in_PointerTo_ns1__setResultadosResponse(soap, NULL, NULL, "ns1:setResultadosResponse");
	case SOAP_TYPE_PointerTo_ns1__setResultados:
		return soap_in_PointerTo_ns1__setResultados(soap, NULL, NULL, "ns1:setResultados");
	case SOAP_TYPE_PointerTons1__ArrayOfTorneio:
		return soap_in_PointerTons1__ArrayOfTorneio(soap, NULL, NULL, "ns1:ArrayOfTorneio");
	case SOAP_TYPE_PointerTons1__ArrayOfClassificacao:
		return soap_in_PointerTons1__ArrayOfClassificacao(soap, NULL, NULL, "ns1:ArrayOfClassificacao");
	case SOAP_TYPE_PointerToPointerTons1__Torneio:
		return soap_in_PointerToPointerTons1__Torneio(soap, NULL, NULL, "ns1:Torneio");
	case SOAP_TYPE_PointerTons1__Torneio:
		return soap_in_PointerTons1__Torneio(soap, NULL, NULL, "ns1:Torneio");
	case SOAP_TYPE_PointerToPointerTons1__Classificacao:
		return soap_in_PointerToPointerTons1__Classificacao(soap, NULL, NULL, "ns1:Classificacao");
	case SOAP_TYPE_PointerTons1__Classificacao:
		return soap_in_PointerTons1__Classificacao(soap, NULL, NULL, "ns1:Classificacao");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:Torneio"))
		{	*type = SOAP_TYPE_ns1__Torneio;
			return soap_in_ns1__Torneio(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfTorneio"))
		{	*type = SOAP_TYPE_ns1__ArrayOfTorneio;
			return soap_in_ns1__ArrayOfTorneio(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Classificacao"))
		{	*type = SOAP_TYPE_ns1__Classificacao;
			return soap_in_ns1__Classificacao(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfClassificacao"))
		{	*type = SOAP_TYPE_ns1__ArrayOfClassificacao;
			return soap_in_ns1__ArrayOfClassificacao(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:loginResponse"))
		{	*type = SOAP_TYPE__ns1__loginResponse;
			return soap_in__ns1__loginResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:login"))
		{	*type = SOAP_TYPE__ns1__login;
			return soap_in__ns1__login(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getTorneioResponse"))
		{	*type = SOAP_TYPE__ns1__getTorneioResponse;
			return soap_in__ns1__getTorneioResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getTorneio"))
		{	*type = SOAP_TYPE__ns1__getTorneio;
			return soap_in__ns1__getTorneio(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:setResultadosResponse"))
		{	*type = SOAP_TYPE__ns1__setResultadosResponse;
			return soap_in__ns1__setResultadosResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:setResultados"))
		{	*type = SOAP_TYPE__ns1__setResultados;
			return soap_in__ns1__setResultados(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE__ns1__loginResponse:
		return ((_ns1__loginResponse *)ptr)->soap_out(soap, "ns1:loginResponse", id, NULL);
	case SOAP_TYPE__ns1__login:
		return ((_ns1__login *)ptr)->soap_out(soap, "ns1:login", id, NULL);
	case SOAP_TYPE__ns1__getTorneioResponse:
		return ((_ns1__getTorneioResponse *)ptr)->soap_out(soap, "ns1:getTorneioResponse", id, NULL);
	case SOAP_TYPE__ns1__getTorneio:
		return ((_ns1__getTorneio *)ptr)->soap_out(soap, "ns1:getTorneio", id, NULL);
	case SOAP_TYPE__ns1__setResultadosResponse:
		return ((_ns1__setResultadosResponse *)ptr)->soap_out(soap, "ns1:setResultadosResponse", id, NULL);
	case SOAP_TYPE__ns1__setResultados:
		return ((_ns1__setResultados *)ptr)->soap_out(soap, "ns1:setResultados", id, NULL);
	case SOAP_TYPE_ns1__Torneio:
		return ((ns1__Torneio *)ptr)->soap_out(soap, tag, id, "ns1:Torneio");
	case SOAP_TYPE_ns1__ArrayOfTorneio:
		return ((ns1__ArrayOfTorneio *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfTorneio");
	case SOAP_TYPE_ns1__Classificacao:
		return ((ns1__Classificacao *)ptr)->soap_out(soap, tag, id, "ns1:Classificacao");
	case SOAP_TYPE_ns1__ArrayOfClassificacao:
		return ((ns1__ArrayOfClassificacao *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfClassificacao");
	case SOAP_TYPE_PointerTo_ns1__loginResponse:
		return soap_out_PointerTo_ns1__loginResponse(soap, tag, id, (_ns1__loginResponse *const*)ptr, "ns1:loginResponse");
	case SOAP_TYPE_PointerTo_ns1__login:
		return soap_out_PointerTo_ns1__login(soap, tag, id, (_ns1__login *const*)ptr, "ns1:login");
	case SOAP_TYPE_PointerTo_ns1__getTorneioResponse:
		return soap_out_PointerTo_ns1__getTorneioResponse(soap, tag, id, (_ns1__getTorneioResponse *const*)ptr, "ns1:getTorneioResponse");
	case SOAP_TYPE_PointerTo_ns1__getTorneio:
		return soap_out_PointerTo_ns1__getTorneio(soap, tag, id, (_ns1__getTorneio *const*)ptr, "ns1:getTorneio");
	case SOAP_TYPE_PointerTo_ns1__setResultadosResponse:
		return soap_out_PointerTo_ns1__setResultadosResponse(soap, tag, id, (_ns1__setResultadosResponse *const*)ptr, "ns1:setResultadosResponse");
	case SOAP_TYPE_PointerTo_ns1__setResultados:
		return soap_out_PointerTo_ns1__setResultados(soap, tag, id, (_ns1__setResultados *const*)ptr, "ns1:setResultados");
	case SOAP_TYPE_PointerTons1__ArrayOfTorneio:
		return soap_out_PointerTons1__ArrayOfTorneio(soap, tag, id, (ns1__ArrayOfTorneio *const*)ptr, "ns1:ArrayOfTorneio");
	case SOAP_TYPE_PointerTons1__ArrayOfClassificacao:
		return soap_out_PointerTons1__ArrayOfClassificacao(soap, tag, id, (ns1__ArrayOfClassificacao *const*)ptr, "ns1:ArrayOfClassificacao");
	case SOAP_TYPE_PointerToPointerTons1__Torneio:
		return soap_out_PointerToPointerTons1__Torneio(soap, tag, id, (ns1__Torneio **const*)ptr, "ns1:Torneio");
	case SOAP_TYPE_PointerTons1__Torneio:
		return soap_out_PointerTons1__Torneio(soap, tag, id, (ns1__Torneio *const*)ptr, "ns1:Torneio");
	case SOAP_TYPE_PointerToPointerTons1__Classificacao:
		return soap_out_PointerToPointerTons1__Classificacao(soap, tag, id, (ns1__Classificacao **const*)ptr, "ns1:Classificacao");
	case SOAP_TYPE_PointerTons1__Classificacao:
		return soap_out_PointerTons1__Classificacao(soap, tag, id, (ns1__Classificacao *const*)ptr, "ns1:Classificacao");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns1__loginResponse:
		((_ns1__loginResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__login:
		((_ns1__login *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getTorneioResponse:
		((_ns1__getTorneioResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getTorneio:
		((_ns1__getTorneio *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__setResultadosResponse:
		((_ns1__setResultadosResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__setResultados:
		((_ns1__setResultados *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Torneio:
		((ns1__Torneio *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfTorneio:
		((ns1__ArrayOfTorneio *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Classificacao:
		((ns1__Classificacao *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfClassificacao:
		((ns1__ArrayOfClassificacao *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns3__login:
		soap_serialize___ns3__login(soap, (const struct __ns3__login *)ptr);
		break;
	case SOAP_TYPE___ns3__getTorneio:
		soap_serialize___ns3__getTorneio(soap, (const struct __ns3__getTorneio *)ptr);
		break;
	case SOAP_TYPE___ns3__setResultados:
		soap_serialize___ns3__setResultados(soap, (const struct __ns3__setResultados *)ptr);
		break;
	case SOAP_TYPE___ns2__login:
		soap_serialize___ns2__login(soap, (const struct __ns2__login *)ptr);
		break;
	case SOAP_TYPE___ns2__getTorneio:
		soap_serialize___ns2__getTorneio(soap, (const struct __ns2__getTorneio *)ptr);
		break;
	case SOAP_TYPE___ns2__setResultados:
		soap_serialize___ns2__setResultados(soap, (const struct __ns2__setResultados *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__loginResponse:
		soap_serialize_PointerTo_ns1__loginResponse(soap, (_ns1__loginResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__login:
		soap_serialize_PointerTo_ns1__login(soap, (_ns1__login *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getTorneioResponse:
		soap_serialize_PointerTo_ns1__getTorneioResponse(soap, (_ns1__getTorneioResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getTorneio:
		soap_serialize_PointerTo_ns1__getTorneio(soap, (_ns1__getTorneio *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__setResultadosResponse:
		soap_serialize_PointerTo_ns1__setResultadosResponse(soap, (_ns1__setResultadosResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__setResultados:
		soap_serialize_PointerTo_ns1__setResultados(soap, (_ns1__setResultados *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfTorneio:
		soap_serialize_PointerTons1__ArrayOfTorneio(soap, (ns1__ArrayOfTorneio *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfClassificacao:
		soap_serialize_PointerTons1__ArrayOfClassificacao(soap, (ns1__ArrayOfClassificacao *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__Torneio:
		soap_serialize_PointerToPointerTons1__Torneio(soap, (ns1__Torneio **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Torneio:
		soap_serialize_PointerTons1__Torneio(soap, (ns1__Torneio *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__Classificacao:
		soap_serialize_PointerToPointerTons1__Classificacao(soap, (ns1__Classificacao **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Classificacao:
		soap_serialize_PointerTons1__Classificacao(soap, (ns1__Classificacao *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_ns1__ArrayOfClassificacao:
		return (void*)soap_instantiate_ns1__ArrayOfClassificacao(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Classificacao:
		return (void*)soap_instantiate_ns1__Classificacao(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfTorneio:
		return (void*)soap_instantiate_ns1__ArrayOfTorneio(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Torneio:
		return (void*)soap_instantiate_ns1__Torneio(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__setResultados:
		return (void*)soap_instantiate__ns1__setResultados(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__setResultadosResponse:
		return (void*)soap_instantiate__ns1__setResultadosResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getTorneio:
		return (void*)soap_instantiate__ns1__getTorneio(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getTorneioResponse:
		return (void*)soap_instantiate__ns1__getTorneioResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__login:
		return (void*)soap_instantiate__ns1__login(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__loginResponse:
		return (void*)soap_instantiate__ns1__loginResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__setResultados:
		return (void*)soap_instantiate___ns2__setResultados(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__getTorneio:
		return (void*)soap_instantiate___ns2__getTorneio(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__login:
		return (void*)soap_instantiate___ns2__login(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__setResultados:
		return (void*)soap_instantiate___ns3__setResultados(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__getTorneio:
		return (void*)soap_instantiate___ns3__getTorneio(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__login:
		return (void*)soap_instantiate___ns3__login(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_ns1__ArrayOfClassificacao:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfClassificacao*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfClassificacao*)p->ptr);
		break;
	case SOAP_TYPE_ns1__Classificacao:
		if (p->size < 0)
			SOAP_DELETE((ns1__Classificacao*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__Classificacao*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfTorneio:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfTorneio*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfTorneio*)p->ptr);
		break;
	case SOAP_TYPE_ns1__Torneio:
		if (p->size < 0)
			SOAP_DELETE((ns1__Torneio*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__Torneio*)p->ptr);
		break;
	case SOAP_TYPE__ns1__setResultados:
		if (p->size < 0)
			SOAP_DELETE((_ns1__setResultados*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__setResultados*)p->ptr);
		break;
	case SOAP_TYPE__ns1__setResultadosResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__setResultadosResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__setResultadosResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__getTorneio:
		if (p->size < 0)
			SOAP_DELETE((_ns1__getTorneio*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__getTorneio*)p->ptr);
		break;
	case SOAP_TYPE__ns1__getTorneioResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__getTorneioResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__getTorneioResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__login:
		if (p->size < 0)
			SOAP_DELETE((_ns1__login*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__login*)p->ptr);
		break;
	case SOAP_TYPE__ns1__loginResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__loginResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__loginResponse*)p->ptr);
		break;
	case SOAP_TYPE___ns2__setResultados:
		if (p->size < 0)
			SOAP_DELETE((struct __ns2__setResultados*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns2__setResultados*)p->ptr);
		break;
	case SOAP_TYPE___ns2__getTorneio:
		if (p->size < 0)
			SOAP_DELETE((struct __ns2__getTorneio*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns2__getTorneio*)p->ptr);
		break;
	case SOAP_TYPE___ns2__login:
		if (p->size < 0)
			SOAP_DELETE((struct __ns2__login*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns2__login*)p->ptr);
		break;
	case SOAP_TYPE___ns3__setResultados:
		if (p->size < 0)
			SOAP_DELETE((struct __ns3__setResultados*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns3__setResultados*)p->ptr);
		break;
	case SOAP_TYPE___ns3__getTorneio:
		if (p->size < 0)
			SOAP_DELETE((struct __ns3__getTorneio*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns3__getTorneio*)p->ptr);
		break;
	case SOAP_TYPE___ns3__login:
		if (p->size < 0)
			SOAP_DELETE((struct __ns3__login*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns3__login*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag?tag:"double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_time);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{	time_t *p;
	p = soap_indateTime(soap, tag, a, type, SOAP_TYPE_time);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_time);
	if (soap_out_time(soap, tag?tag:"dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__loginResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__loginResponse::loginResult);
	/* transient soap skipped */
}

void _ns1__loginResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__loginResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__loginResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__loginResponse(struct soap *soap, const char *tag, int id, const _ns1__loginResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__loginResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:loginResult");
	if (soap_out_int(soap, "ns1:loginResult", -1, &(a->_ns1__loginResponse::loginResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__loginResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__loginResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__loginResponse * SOAP_FMAC4 soap_in__ns1__loginResponse(struct soap *soap, const char *tag, _ns1__loginResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__loginResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__loginResponse, sizeof(_ns1__loginResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__loginResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__loginResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_loginResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_loginResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:loginResult", &(a->_ns1__loginResponse::loginResult), "xsd:int"))
				{	soap_flag_loginResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:loginResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__loginResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__loginResponse, 0, sizeof(_ns1__loginResponse), 0, soap_copy__ns1__loginResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_loginResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__loginResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__loginResponse);
	if (this->soap_out(soap, tag?tag:"ns1:loginResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__loginResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__loginResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__loginResponse * SOAP_FMAC4 soap_get__ns1__loginResponse(struct soap *soap, _ns1__loginResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__loginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__loginResponse * SOAP_FMAC2 soap_instantiate__ns1__loginResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__loginResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__loginResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__loginResponse);
		if (size)
			*size = sizeof(_ns1__loginResponse);
		((_ns1__loginResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__loginResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__loginResponse);
		for (int i = 0; i < n; i++)
			((_ns1__loginResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__loginResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__loginResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__loginResponse %p -> %p\n", q, p));
	*(_ns1__loginResponse*)p = *(_ns1__loginResponse*)q;
}

void _ns1__login::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__login::utilizador);
	soap_default_string(soap, &this->_ns1__login::md5password);
	/* transient soap skipped */
}

void _ns1__login::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__login::md5password);
	/* transient soap skipped */
}

int _ns1__login::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__login(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__login(struct soap *soap, const char *tag, int id, const _ns1__login *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__login), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:utilizador", -1, &(a->_ns1__login::utilizador), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:md5password", -1, &(a->_ns1__login::md5password), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__login::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__login(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__login * SOAP_FMAC4 soap_in__ns1__login(struct soap *soap, const char *tag, _ns1__login *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__login *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__login, sizeof(_ns1__login), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__login)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__login *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_utilizador1 = 1;
	size_t soap_flag_md5password1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_utilizador1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:utilizador", &(a->_ns1__login::utilizador), "xsd:int"))
				{	soap_flag_utilizador1--;
					continue;
				}
			if (soap_flag_md5password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:md5password", &(a->_ns1__login::md5password), "xsd:string"))
				{	soap_flag_md5password1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__login *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__login, 0, sizeof(_ns1__login), 0, soap_copy__ns1__login);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_utilizador1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__login::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__login);
	if (this->soap_out(soap, tag?tag:"ns1:login", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__login::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__login(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__login * SOAP_FMAC4 soap_get__ns1__login(struct soap *soap, _ns1__login *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__login * SOAP_FMAC2 soap_instantiate__ns1__login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__login);
		if (size)
			*size = sizeof(_ns1__login);
		((_ns1__login*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__login[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__login);
		for (int i = 0; i < n; i++)
			((_ns1__login*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__login*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__login %p -> %p\n", q, p));
	*(_ns1__login*)p = *(_ns1__login*)q;
}

void _ns1__getTorneioResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getTorneioResponse::getTorneioResult = NULL;
	/* transient soap skipped */
}

void _ns1__getTorneioResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfTorneio(soap, &this->_ns1__getTorneioResponse::getTorneioResult);
	/* transient soap skipped */
}

int _ns1__getTorneioResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getTorneioResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getTorneioResponse(struct soap *soap, const char *tag, int id, const _ns1__getTorneioResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getTorneioResponse), type))
		return soap->error;
	if (a->getTorneioResult)
		soap_element_result(soap, "ns1:getTorneioResult");
	if (soap_out_PointerTons1__ArrayOfTorneio(soap, "ns1:getTorneioResult", -1, &(a->_ns1__getTorneioResponse::getTorneioResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getTorneioResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getTorneioResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getTorneioResponse * SOAP_FMAC4 soap_in__ns1__getTorneioResponse(struct soap *soap, const char *tag, _ns1__getTorneioResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getTorneioResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getTorneioResponse, sizeof(_ns1__getTorneioResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getTorneioResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getTorneioResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_getTorneioResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getTorneioResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfTorneio(soap, "ns1:getTorneioResult", &(a->_ns1__getTorneioResponse::getTorneioResult), "ns1:ArrayOfTorneio"))
				{	soap_flag_getTorneioResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:getTorneioResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getTorneioResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getTorneioResponse, 0, sizeof(_ns1__getTorneioResponse), 0, soap_copy__ns1__getTorneioResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__getTorneioResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__getTorneioResponse);
	if (this->soap_out(soap, tag?tag:"ns1:getTorneioResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getTorneioResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getTorneioResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getTorneioResponse * SOAP_FMAC4 soap_get__ns1__getTorneioResponse(struct soap *soap, _ns1__getTorneioResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getTorneioResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getTorneioResponse * SOAP_FMAC2 soap_instantiate__ns1__getTorneioResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getTorneioResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getTorneioResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__getTorneioResponse);
		if (size)
			*size = sizeof(_ns1__getTorneioResponse);
		((_ns1__getTorneioResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__getTorneioResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__getTorneioResponse);
		for (int i = 0; i < n; i++)
			((_ns1__getTorneioResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__getTorneioResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getTorneioResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getTorneioResponse %p -> %p\n", q, p));
	*(_ns1__getTorneioResponse*)p = *(_ns1__getTorneioResponse*)q;
}

void _ns1__getTorneio::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__getTorneio::utilizador);
	soap_default_int(soap, &this->_ns1__getTorneio::mapa);
	/* transient soap skipped */
}

void _ns1__getTorneio::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__getTorneio::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getTorneio(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getTorneio(struct soap *soap, const char *tag, int id, const _ns1__getTorneio *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getTorneio), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:utilizador", -1, &(a->_ns1__getTorneio::utilizador), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:mapa", -1, &(a->_ns1__getTorneio::mapa), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getTorneio::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getTorneio(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getTorneio * SOAP_FMAC4 soap_in__ns1__getTorneio(struct soap *soap, const char *tag, _ns1__getTorneio *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getTorneio *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getTorneio, sizeof(_ns1__getTorneio), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getTorneio)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getTorneio *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_utilizador1 = 1;
	size_t soap_flag_mapa1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_utilizador1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:utilizador", &(a->_ns1__getTorneio::utilizador), "xsd:int"))
				{	soap_flag_utilizador1--;
					continue;
				}
			if (soap_flag_mapa1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:mapa", &(a->_ns1__getTorneio::mapa), "xsd:int"))
				{	soap_flag_mapa1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getTorneio *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getTorneio, 0, sizeof(_ns1__getTorneio), 0, soap_copy__ns1__getTorneio);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_utilizador1 > 0 || soap_flag_mapa1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__getTorneio::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__getTorneio);
	if (this->soap_out(soap, tag?tag:"ns1:getTorneio", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getTorneio::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getTorneio(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getTorneio * SOAP_FMAC4 soap_get__ns1__getTorneio(struct soap *soap, _ns1__getTorneio *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getTorneio(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getTorneio * SOAP_FMAC2 soap_instantiate__ns1__getTorneio(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getTorneio(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getTorneio, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__getTorneio);
		if (size)
			*size = sizeof(_ns1__getTorneio);
		((_ns1__getTorneio*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__getTorneio[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__getTorneio);
		for (int i = 0; i < n; i++)
			((_ns1__getTorneio*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__getTorneio*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getTorneio(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getTorneio %p -> %p\n", q, p));
	*(_ns1__getTorneio*)p = *(_ns1__getTorneio*)q;
}

void _ns1__setResultadosResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__setResultadosResponse::setResultadosResult = NULL;
	/* transient soap skipped */
}

void _ns1__setResultadosResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfClassificacao(soap, &this->_ns1__setResultadosResponse::setResultadosResult);
	/* transient soap skipped */
}

int _ns1__setResultadosResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__setResultadosResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setResultadosResponse(struct soap *soap, const char *tag, int id, const _ns1__setResultadosResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__setResultadosResponse), type))
		return soap->error;
	if (a->setResultadosResult)
		soap_element_result(soap, "ns1:setResultadosResult");
	if (soap_out_PointerTons1__ArrayOfClassificacao(soap, "ns1:setResultadosResult", -1, &(a->_ns1__setResultadosResponse::setResultadosResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__setResultadosResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__setResultadosResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__setResultadosResponse * SOAP_FMAC4 soap_in__ns1__setResultadosResponse(struct soap *soap, const char *tag, _ns1__setResultadosResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__setResultadosResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__setResultadosResponse, sizeof(_ns1__setResultadosResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__setResultadosResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__setResultadosResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_setResultadosResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_setResultadosResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfClassificacao(soap, "ns1:setResultadosResult", &(a->_ns1__setResultadosResponse::setResultadosResult), "ns1:ArrayOfClassificacao"))
				{	soap_flag_setResultadosResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:setResultadosResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__setResultadosResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__setResultadosResponse, 0, sizeof(_ns1__setResultadosResponse), 0, soap_copy__ns1__setResultadosResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__setResultadosResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__setResultadosResponse);
	if (this->soap_out(soap, tag?tag:"ns1:setResultadosResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__setResultadosResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__setResultadosResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__setResultadosResponse * SOAP_FMAC4 soap_get__ns1__setResultadosResponse(struct soap *soap, _ns1__setResultadosResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__setResultadosResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__setResultadosResponse * SOAP_FMAC2 soap_instantiate__ns1__setResultadosResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__setResultadosResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__setResultadosResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__setResultadosResponse);
		if (size)
			*size = sizeof(_ns1__setResultadosResponse);
		((_ns1__setResultadosResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__setResultadosResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__setResultadosResponse);
		for (int i = 0; i < n; i++)
			((_ns1__setResultadosResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__setResultadosResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__setResultadosResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__setResultadosResponse %p -> %p\n", q, p));
	*(_ns1__setResultadosResponse*)p = *(_ns1__setResultadosResponse*)q;
}

void _ns1__setResultados::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__setResultados::utilizador);
	soap_default_int(soap, &this->_ns1__setResultados::mapa);
	soap_default_int(soap, &this->_ns1__setResultados::torneio);
	soap_default_double(soap, &this->_ns1__setResultados::pontuacao);
	/* transient soap skipped */
}

void _ns1__setResultados::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__setResultados::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__setResultados(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setResultados(struct soap *soap, const char *tag, int id, const _ns1__setResultados *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__setResultados), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:utilizador", -1, &(a->_ns1__setResultados::utilizador), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:mapa", -1, &(a->_ns1__setResultados::mapa), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:torneio", -1, &(a->_ns1__setResultados::torneio), ""))
		return soap->error;
	if (soap_out_double(soap, "ns1:pontuacao", -1, &(a->_ns1__setResultados::pontuacao), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__setResultados::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__setResultados(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__setResultados * SOAP_FMAC4 soap_in__ns1__setResultados(struct soap *soap, const char *tag, _ns1__setResultados *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__setResultados *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__setResultados, sizeof(_ns1__setResultados), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__setResultados)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__setResultados *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_utilizador1 = 1;
	size_t soap_flag_mapa1 = 1;
	size_t soap_flag_torneio1 = 1;
	size_t soap_flag_pontuacao1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_utilizador1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:utilizador", &(a->_ns1__setResultados::utilizador), "xsd:int"))
				{	soap_flag_utilizador1--;
					continue;
				}
			if (soap_flag_mapa1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:mapa", &(a->_ns1__setResultados::mapa), "xsd:int"))
				{	soap_flag_mapa1--;
					continue;
				}
			if (soap_flag_torneio1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:torneio", &(a->_ns1__setResultados::torneio), "xsd:int"))
				{	soap_flag_torneio1--;
					continue;
				}
			if (soap_flag_pontuacao1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "ns1:pontuacao", &(a->_ns1__setResultados::pontuacao), "xsd:double"))
				{	soap_flag_pontuacao1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__setResultados *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__setResultados, 0, sizeof(_ns1__setResultados), 0, soap_copy__ns1__setResultados);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_utilizador1 > 0 || soap_flag_mapa1 > 0 || soap_flag_torneio1 > 0 || soap_flag_pontuacao1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__setResultados::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__setResultados);
	if (this->soap_out(soap, tag?tag:"ns1:setResultados", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__setResultados::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__setResultados(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__setResultados * SOAP_FMAC4 soap_get__ns1__setResultados(struct soap *soap, _ns1__setResultados *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__setResultados(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__setResultados * SOAP_FMAC2 soap_instantiate__ns1__setResultados(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__setResultados(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__setResultados, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__setResultados);
		if (size)
			*size = sizeof(_ns1__setResultados);
		((_ns1__setResultados*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__setResultados[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__setResultados);
		for (int i = 0; i < n; i++)
			((_ns1__setResultados*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__setResultados*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__setResultados(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__setResultados %p -> %p\n", q, p));
	*(_ns1__setResultados*)p = *(_ns1__setResultados*)q;
}

void ns1__Torneio::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__Torneio::Id);
	soap_default_string(soap, &this->ns1__Torneio::Nome);
	soap_default_time(soap, &this->ns1__Torneio::DataInicio);
	soap_default_time(soap, &this->ns1__Torneio::DataFim);
	/* transient soap skipped */
}

void ns1__Torneio::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__Torneio::Nome);
	/* transient soap skipped */
}

int ns1__Torneio::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Torneio(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Torneio(struct soap *soap, const char *tag, int id, const ns1__Torneio *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Torneio), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:Id", -1, &(a->ns1__Torneio::Id), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:Nome", -1, &(a->ns1__Torneio::Nome), ""))
		return soap->error;
	if (soap_out_time(soap, "ns1:DataInicio", -1, &(a->ns1__Torneio::DataInicio), ""))
		return soap->error;
	if (soap_out_time(soap, "ns1:DataFim", -1, &(a->ns1__Torneio::DataFim), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__Torneio::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Torneio(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Torneio * SOAP_FMAC4 soap_in_ns1__Torneio(struct soap *soap, const char *tag, ns1__Torneio *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Torneio *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Torneio, sizeof(ns1__Torneio), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__Torneio)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__Torneio *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Id1 = 1;
	size_t soap_flag_Nome1 = 1;
	size_t soap_flag_DataInicio1 = 1;
	size_t soap_flag_DataFim1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:Id", &(a->ns1__Torneio::Id), "xsd:int"))
				{	soap_flag_Id1--;
					continue;
				}
			if (soap_flag_Nome1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Nome", &(a->ns1__Torneio::Nome), "xsd:string"))
				{	soap_flag_Nome1--;
					continue;
				}
			if (soap_flag_DataInicio1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "ns1:DataInicio", &(a->ns1__Torneio::DataInicio), "xsd:dateTime"))
				{	soap_flag_DataInicio1--;
					continue;
				}
			if (soap_flag_DataFim1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "ns1:DataFim", &(a->ns1__Torneio::DataFim), "xsd:dateTime"))
				{	soap_flag_DataFim1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Torneio *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Torneio, 0, sizeof(ns1__Torneio), 0, soap_copy_ns1__Torneio);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Id1 > 0 || soap_flag_DataInicio1 > 0 || soap_flag_DataFim1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__Torneio::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__Torneio);
	if (this->soap_out(soap, tag?tag:"ns1:Torneio", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Torneio::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Torneio(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Torneio * SOAP_FMAC4 soap_get_ns1__Torneio(struct soap *soap, ns1__Torneio *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Torneio(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__Torneio * SOAP_FMAC2 soap_instantiate_ns1__Torneio(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Torneio(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__Torneio, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__Torneio);
		if (size)
			*size = sizeof(ns1__Torneio);
		((ns1__Torneio*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__Torneio[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__Torneio);
		for (int i = 0; i < n; i++)
			((ns1__Torneio*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__Torneio*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Torneio(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__Torneio %p -> %p\n", q, p));
	*(ns1__Torneio*)p = *(ns1__Torneio*)q;
}

void ns1__ArrayOfTorneio::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ArrayOfTorneio::__sizeTorneio = 0;
	this->ns1__ArrayOfTorneio::Torneio = NULL;
	/* transient soap skipped */
}

void ns1__ArrayOfTorneio::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->ns1__ArrayOfTorneio::Torneio)
	{	int i;
		for (i = 0; i < this->ns1__ArrayOfTorneio::__sizeTorneio; i++)
		{
			soap_serialize_PointerTons1__Torneio(soap, this->ns1__ArrayOfTorneio::Torneio + i);
		}
	}
	/* transient soap skipped */
}

int ns1__ArrayOfTorneio::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfTorneio(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfTorneio(struct soap *soap, const char *tag, int id, const ns1__ArrayOfTorneio *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfTorneio), type))
		return soap->error;
	if (a->ns1__ArrayOfTorneio::Torneio)
	{	int i;
		for (i = 0; i < a->ns1__ArrayOfTorneio::__sizeTorneio; i++)
			if (soap_out_PointerTons1__Torneio(soap, "ns1:Torneio", -1, a->ns1__ArrayOfTorneio::Torneio + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfTorneio::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfTorneio(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfTorneio * SOAP_FMAC4 soap_in_ns1__ArrayOfTorneio(struct soap *soap, const char *tag, ns1__ArrayOfTorneio *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfTorneio *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfTorneio, sizeof(ns1__ArrayOfTorneio), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfTorneio)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfTorneio *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_Torneio1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ns1:Torneio", 1, NULL))
			{	if (a->ns1__ArrayOfTorneio::Torneio == NULL)
				{	if (soap_blist_Torneio1 == NULL)
						soap_blist_Torneio1 = soap_new_block(soap);
					a->ns1__ArrayOfTorneio::Torneio = (ns1__Torneio **)soap_push_block(soap, soap_blist_Torneio1, sizeof(ns1__Torneio *));
					if (a->ns1__ArrayOfTorneio::Torneio == NULL)
						return NULL;
					*a->ns1__ArrayOfTorneio::Torneio = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTons1__Torneio(soap, "ns1:Torneio", a->ns1__ArrayOfTorneio::Torneio, "ns1:Torneio"))
				{	a->ns1__ArrayOfTorneio::__sizeTorneio++;
					a->ns1__ArrayOfTorneio::Torneio = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__ArrayOfTorneio::Torneio)
			soap_pop_block(soap, soap_blist_Torneio1);
		if (a->ns1__ArrayOfTorneio::__sizeTorneio)
			a->ns1__ArrayOfTorneio::Torneio = (ns1__Torneio **)soap_save_block(soap, soap_blist_Torneio1, NULL, 1);
		else
		{	a->ns1__ArrayOfTorneio::Torneio = NULL;
			if (soap_blist_Torneio1)
				soap_end_block(soap, soap_blist_Torneio1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfTorneio *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfTorneio, 0, sizeof(ns1__ArrayOfTorneio), 0, soap_copy_ns1__ArrayOfTorneio);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfTorneio::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfTorneio);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfTorneio", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfTorneio::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfTorneio(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfTorneio * SOAP_FMAC4 soap_get_ns1__ArrayOfTorneio(struct soap *soap, ns1__ArrayOfTorneio *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfTorneio(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfTorneio * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfTorneio(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfTorneio(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfTorneio, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfTorneio);
		if (size)
			*size = sizeof(ns1__ArrayOfTorneio);
		((ns1__ArrayOfTorneio*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfTorneio[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ArrayOfTorneio);
		for (int i = 0; i < n; i++)
			((ns1__ArrayOfTorneio*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ArrayOfTorneio*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfTorneio(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfTorneio %p -> %p\n", q, p));
	*(ns1__ArrayOfTorneio*)p = *(ns1__ArrayOfTorneio*)q;
}

void ns1__Classificacao::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__Classificacao::Posicao);
	soap_default_string(soap, &this->ns1__Classificacao::Nome);
	soap_default_double(soap, &this->ns1__Classificacao::Pontuacao);
	/* transient soap skipped */
}

void ns1__Classificacao::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__Classificacao::Nome);
	/* transient soap skipped */
}

int ns1__Classificacao::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Classificacao(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Classificacao(struct soap *soap, const char *tag, int id, const ns1__Classificacao *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Classificacao), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:Posicao", -1, &(a->ns1__Classificacao::Posicao), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:Nome", -1, &(a->ns1__Classificacao::Nome), ""))
		return soap->error;
	if (soap_out_double(soap, "ns1:Pontuacao", -1, &(a->ns1__Classificacao::Pontuacao), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__Classificacao::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Classificacao(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Classificacao * SOAP_FMAC4 soap_in_ns1__Classificacao(struct soap *soap, const char *tag, ns1__Classificacao *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Classificacao *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Classificacao, sizeof(ns1__Classificacao), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__Classificacao)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__Classificacao *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Posicao1 = 1;
	size_t soap_flag_Nome1 = 1;
	size_t soap_flag_Pontuacao1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Posicao1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:Posicao", &(a->ns1__Classificacao::Posicao), "xsd:int"))
				{	soap_flag_Posicao1--;
					continue;
				}
			if (soap_flag_Nome1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Nome", &(a->ns1__Classificacao::Nome), "xsd:string"))
				{	soap_flag_Nome1--;
					continue;
				}
			if (soap_flag_Pontuacao1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "ns1:Pontuacao", &(a->ns1__Classificacao::Pontuacao), "xsd:double"))
				{	soap_flag_Pontuacao1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Classificacao *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Classificacao, 0, sizeof(ns1__Classificacao), 0, soap_copy_ns1__Classificacao);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Posicao1 > 0 || soap_flag_Pontuacao1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__Classificacao::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__Classificacao);
	if (this->soap_out(soap, tag?tag:"ns1:Classificacao", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Classificacao::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Classificacao(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Classificacao * SOAP_FMAC4 soap_get_ns1__Classificacao(struct soap *soap, ns1__Classificacao *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Classificacao(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__Classificacao * SOAP_FMAC2 soap_instantiate_ns1__Classificacao(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Classificacao(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__Classificacao, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__Classificacao);
		if (size)
			*size = sizeof(ns1__Classificacao);
		((ns1__Classificacao*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__Classificacao[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__Classificacao);
		for (int i = 0; i < n; i++)
			((ns1__Classificacao*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__Classificacao*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Classificacao(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__Classificacao %p -> %p\n", q, p));
	*(ns1__Classificacao*)p = *(ns1__Classificacao*)q;
}

void ns1__ArrayOfClassificacao::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ArrayOfClassificacao::__sizeClassificacao = 0;
	this->ns1__ArrayOfClassificacao::Classificacao = NULL;
	/* transient soap skipped */
}

void ns1__ArrayOfClassificacao::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->ns1__ArrayOfClassificacao::Classificacao)
	{	int i;
		for (i = 0; i < this->ns1__ArrayOfClassificacao::__sizeClassificacao; i++)
		{
			soap_serialize_PointerTons1__Classificacao(soap, this->ns1__ArrayOfClassificacao::Classificacao + i);
		}
	}
	/* transient soap skipped */
}

int ns1__ArrayOfClassificacao::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfClassificacao(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfClassificacao(struct soap *soap, const char *tag, int id, const ns1__ArrayOfClassificacao *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfClassificacao), type))
		return soap->error;
	if (a->ns1__ArrayOfClassificacao::Classificacao)
	{	int i;
		for (i = 0; i < a->ns1__ArrayOfClassificacao::__sizeClassificacao; i++)
			if (soap_out_PointerTons1__Classificacao(soap, "ns1:Classificacao", -1, a->ns1__ArrayOfClassificacao::Classificacao + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfClassificacao::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfClassificacao(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfClassificacao * SOAP_FMAC4 soap_in_ns1__ArrayOfClassificacao(struct soap *soap, const char *tag, ns1__ArrayOfClassificacao *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfClassificacao *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfClassificacao, sizeof(ns1__ArrayOfClassificacao), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfClassificacao)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfClassificacao *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_Classificacao1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ns1:Classificacao", 1, NULL))
			{	if (a->ns1__ArrayOfClassificacao::Classificacao == NULL)
				{	if (soap_blist_Classificacao1 == NULL)
						soap_blist_Classificacao1 = soap_new_block(soap);
					a->ns1__ArrayOfClassificacao::Classificacao = (ns1__Classificacao **)soap_push_block(soap, soap_blist_Classificacao1, sizeof(ns1__Classificacao *));
					if (a->ns1__ArrayOfClassificacao::Classificacao == NULL)
						return NULL;
					*a->ns1__ArrayOfClassificacao::Classificacao = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTons1__Classificacao(soap, "ns1:Classificacao", a->ns1__ArrayOfClassificacao::Classificacao, "ns1:Classificacao"))
				{	a->ns1__ArrayOfClassificacao::__sizeClassificacao++;
					a->ns1__ArrayOfClassificacao::Classificacao = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__ArrayOfClassificacao::Classificacao)
			soap_pop_block(soap, soap_blist_Classificacao1);
		if (a->ns1__ArrayOfClassificacao::__sizeClassificacao)
			a->ns1__ArrayOfClassificacao::Classificacao = (ns1__Classificacao **)soap_save_block(soap, soap_blist_Classificacao1, NULL, 1);
		else
		{	a->ns1__ArrayOfClassificacao::Classificacao = NULL;
			if (soap_blist_Classificacao1)
				soap_end_block(soap, soap_blist_Classificacao1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfClassificacao *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfClassificacao, 0, sizeof(ns1__ArrayOfClassificacao), 0, soap_copy_ns1__ArrayOfClassificacao);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfClassificacao::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfClassificacao);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfClassificacao", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfClassificacao::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfClassificacao(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfClassificacao * SOAP_FMAC4 soap_get_ns1__ArrayOfClassificacao(struct soap *soap, ns1__ArrayOfClassificacao *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfClassificacao(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfClassificacao * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfClassificacao(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfClassificacao(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfClassificacao, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfClassificacao);
		if (size)
			*size = sizeof(ns1__ArrayOfClassificacao);
		((ns1__ArrayOfClassificacao*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfClassificacao[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ArrayOfClassificacao);
		for (int i = 0; i < n; i++)
			((ns1__ArrayOfClassificacao*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ArrayOfClassificacao*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfClassificacao(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfClassificacao %p -> %p\n", q, p));
	*(ns1__ArrayOfClassificacao*)p = *(ns1__ArrayOfClassificacao*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__login(struct soap *soap, struct __ns3__login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__login = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__login(struct soap *soap, const struct __ns3__login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__login(soap, &a->ns1__login);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__login(struct soap *soap, const char *tag, int id, const struct __ns3__login *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__login(soap, "ns1:login", -1, &a->ns1__login, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__login * SOAP_FMAC4 soap_in___ns3__login(struct soap *soap, const char *tag, struct __ns3__login *a, const char *type)
{
	size_t soap_flag_ns1__login = 1;
	short soap_flag;
	a = (struct __ns3__login *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__login, sizeof(struct __ns3__login), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__login(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__login && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__login(soap, "ns1:login", &a->ns1__login, ""))
				{	soap_flag_ns1__login--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__login(struct soap *soap, const struct __ns3__login *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__login(soap, tag?tag:"-ns3:login", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__login * SOAP_FMAC4 soap_get___ns3__login(struct soap *soap, struct __ns3__login *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns3__login * SOAP_FMAC2 soap_instantiate___ns3__login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__login);
		if (size)
			*size = sizeof(struct __ns3__login);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__login[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__login);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__login*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__login %p -> %p\n", q, p));
	*(struct __ns3__login*)p = *(struct __ns3__login*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__getTorneio(struct soap *soap, struct __ns3__getTorneio *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getTorneio = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__getTorneio(struct soap *soap, const struct __ns3__getTorneio *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__getTorneio(soap, &a->ns1__getTorneio);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__getTorneio(struct soap *soap, const char *tag, int id, const struct __ns3__getTorneio *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__getTorneio(soap, "ns1:getTorneio", -1, &a->ns1__getTorneio, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__getTorneio * SOAP_FMAC4 soap_in___ns3__getTorneio(struct soap *soap, const char *tag, struct __ns3__getTorneio *a, const char *type)
{
	size_t soap_flag_ns1__getTorneio = 1;
	short soap_flag;
	a = (struct __ns3__getTorneio *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__getTorneio, sizeof(struct __ns3__getTorneio), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__getTorneio(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getTorneio && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getTorneio(soap, "ns1:getTorneio", &a->ns1__getTorneio, ""))
				{	soap_flag_ns1__getTorneio--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__getTorneio(struct soap *soap, const struct __ns3__getTorneio *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__getTorneio(soap, tag?tag:"-ns3:getTorneio", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__getTorneio * SOAP_FMAC4 soap_get___ns3__getTorneio(struct soap *soap, struct __ns3__getTorneio *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__getTorneio(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns3__getTorneio * SOAP_FMAC2 soap_instantiate___ns3__getTorneio(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__getTorneio(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__getTorneio, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__getTorneio);
		if (size)
			*size = sizeof(struct __ns3__getTorneio);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__getTorneio[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__getTorneio);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__getTorneio*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__getTorneio(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__getTorneio %p -> %p\n", q, p));
	*(struct __ns3__getTorneio*)p = *(struct __ns3__getTorneio*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__setResultados(struct soap *soap, struct __ns3__setResultados *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__setResultados = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__setResultados(struct soap *soap, const struct __ns3__setResultados *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__setResultados(soap, &a->ns1__setResultados);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__setResultados(struct soap *soap, const char *tag, int id, const struct __ns3__setResultados *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__setResultados(soap, "ns1:setResultados", -1, &a->ns1__setResultados, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__setResultados * SOAP_FMAC4 soap_in___ns3__setResultados(struct soap *soap, const char *tag, struct __ns3__setResultados *a, const char *type)
{
	size_t soap_flag_ns1__setResultados = 1;
	short soap_flag;
	a = (struct __ns3__setResultados *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__setResultados, sizeof(struct __ns3__setResultados), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__setResultados(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__setResultados && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__setResultados(soap, "ns1:setResultados", &a->ns1__setResultados, ""))
				{	soap_flag_ns1__setResultados--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__setResultados(struct soap *soap, const struct __ns3__setResultados *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__setResultados(soap, tag?tag:"-ns3:setResultados", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__setResultados * SOAP_FMAC4 soap_get___ns3__setResultados(struct soap *soap, struct __ns3__setResultados *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__setResultados(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns3__setResultados * SOAP_FMAC2 soap_instantiate___ns3__setResultados(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__setResultados(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__setResultados, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__setResultados);
		if (size)
			*size = sizeof(struct __ns3__setResultados);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__setResultados[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__setResultados);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__setResultados*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__setResultados(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__setResultados %p -> %p\n", q, p));
	*(struct __ns3__setResultados*)p = *(struct __ns3__setResultados*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__login(struct soap *soap, struct __ns2__login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__login = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__login(struct soap *soap, const struct __ns2__login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__login(soap, &a->ns1__login);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__login(struct soap *soap, const char *tag, int id, const struct __ns2__login *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__login(soap, "ns1:login", -1, &a->ns1__login, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__login * SOAP_FMAC4 soap_in___ns2__login(struct soap *soap, const char *tag, struct __ns2__login *a, const char *type)
{
	size_t soap_flag_ns1__login = 1;
	short soap_flag;
	a = (struct __ns2__login *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__login, sizeof(struct __ns2__login), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__login(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__login && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__login(soap, "ns1:login", &a->ns1__login, ""))
				{	soap_flag_ns1__login--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__login(struct soap *soap, const struct __ns2__login *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__login(soap, tag?tag:"-ns2:login", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__login * SOAP_FMAC4 soap_get___ns2__login(struct soap *soap, struct __ns2__login *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns2__login * SOAP_FMAC2 soap_instantiate___ns2__login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__login);
		if (size)
			*size = sizeof(struct __ns2__login);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__login[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__login);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__login*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__login %p -> %p\n", q, p));
	*(struct __ns2__login*)p = *(struct __ns2__login*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__getTorneio(struct soap *soap, struct __ns2__getTorneio *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getTorneio = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__getTorneio(struct soap *soap, const struct __ns2__getTorneio *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__getTorneio(soap, &a->ns1__getTorneio);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__getTorneio(struct soap *soap, const char *tag, int id, const struct __ns2__getTorneio *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__getTorneio(soap, "ns1:getTorneio", -1, &a->ns1__getTorneio, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__getTorneio * SOAP_FMAC4 soap_in___ns2__getTorneio(struct soap *soap, const char *tag, struct __ns2__getTorneio *a, const char *type)
{
	size_t soap_flag_ns1__getTorneio = 1;
	short soap_flag;
	a = (struct __ns2__getTorneio *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__getTorneio, sizeof(struct __ns2__getTorneio), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__getTorneio(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getTorneio && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getTorneio(soap, "ns1:getTorneio", &a->ns1__getTorneio, ""))
				{	soap_flag_ns1__getTorneio--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__getTorneio(struct soap *soap, const struct __ns2__getTorneio *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__getTorneio(soap, tag?tag:"-ns2:getTorneio", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__getTorneio * SOAP_FMAC4 soap_get___ns2__getTorneio(struct soap *soap, struct __ns2__getTorneio *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__getTorneio(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns2__getTorneio * SOAP_FMAC2 soap_instantiate___ns2__getTorneio(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__getTorneio(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__getTorneio, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__getTorneio);
		if (size)
			*size = sizeof(struct __ns2__getTorneio);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__getTorneio[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__getTorneio);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__getTorneio*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__getTorneio(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__getTorneio %p -> %p\n", q, p));
	*(struct __ns2__getTorneio*)p = *(struct __ns2__getTorneio*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__setResultados(struct soap *soap, struct __ns2__setResultados *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__setResultados = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__setResultados(struct soap *soap, const struct __ns2__setResultados *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__setResultados(soap, &a->ns1__setResultados);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__setResultados(struct soap *soap, const char *tag, int id, const struct __ns2__setResultados *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__setResultados(soap, "ns1:setResultados", -1, &a->ns1__setResultados, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__setResultados * SOAP_FMAC4 soap_in___ns2__setResultados(struct soap *soap, const char *tag, struct __ns2__setResultados *a, const char *type)
{
	size_t soap_flag_ns1__setResultados = 1;
	short soap_flag;
	a = (struct __ns2__setResultados *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__setResultados, sizeof(struct __ns2__setResultados), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__setResultados(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__setResultados && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__setResultados(soap, "ns1:setResultados", &a->ns1__setResultados, ""))
				{	soap_flag_ns1__setResultados--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__setResultados(struct soap *soap, const struct __ns2__setResultados *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__setResultados(soap, tag?tag:"-ns2:setResultados", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__setResultados * SOAP_FMAC4 soap_get___ns2__setResultados(struct soap *soap, struct __ns2__setResultados *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__setResultados(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns2__setResultados * SOAP_FMAC2 soap_instantiate___ns2__setResultados(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__setResultados(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__setResultados, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__setResultados);
		if (size)
			*size = sizeof(struct __ns2__setResultados);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__setResultados[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__setResultados);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__setResultados*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__setResultados(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__setResultados %p -> %p\n", q, p));
	*(struct __ns2__setResultados*)p = *(struct __ns2__setResultados*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__loginResponse(struct soap *soap, _ns1__loginResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__loginResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__loginResponse(struct soap *soap, const char *tag, int id, _ns1__loginResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__loginResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__loginResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__loginResponse(struct soap *soap, const char *tag, _ns1__loginResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__loginResponse **)soap_malloc(soap, sizeof(_ns1__loginResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__loginResponse *)soap_instantiate__ns1__loginResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__loginResponse ** p = (_ns1__loginResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__loginResponse, sizeof(_ns1__loginResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__loginResponse(struct soap *soap, _ns1__loginResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__loginResponse);
	if (soap_out_PointerTo_ns1__loginResponse(soap, tag?tag:"ns1:loginResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__loginResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__loginResponse(struct soap *soap, _ns1__loginResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__loginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__login(struct soap *soap, _ns1__login *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__login))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__login(struct soap *soap, const char *tag, int id, _ns1__login *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__login);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__login ** SOAP_FMAC4 soap_in_PointerTo_ns1__login(struct soap *soap, const char *tag, _ns1__login **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__login **)soap_malloc(soap, sizeof(_ns1__login *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__login *)soap_instantiate__ns1__login(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__login ** p = (_ns1__login **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__login, sizeof(_ns1__login), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__login(struct soap *soap, _ns1__login *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__login);
	if (soap_out_PointerTo_ns1__login(soap, tag?tag:"ns1:login", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__login ** SOAP_FMAC4 soap_get_PointerTo_ns1__login(struct soap *soap, _ns1__login **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getTorneioResponse(struct soap *soap, _ns1__getTorneioResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getTorneioResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getTorneioResponse(struct soap *soap, const char *tag, int id, _ns1__getTorneioResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getTorneioResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getTorneioResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__getTorneioResponse(struct soap *soap, const char *tag, _ns1__getTorneioResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getTorneioResponse **)soap_malloc(soap, sizeof(_ns1__getTorneioResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getTorneioResponse *)soap_instantiate__ns1__getTorneioResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getTorneioResponse ** p = (_ns1__getTorneioResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getTorneioResponse, sizeof(_ns1__getTorneioResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getTorneioResponse(struct soap *soap, _ns1__getTorneioResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__getTorneioResponse);
	if (soap_out_PointerTo_ns1__getTorneioResponse(soap, tag?tag:"ns1:getTorneioResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getTorneioResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__getTorneioResponse(struct soap *soap, _ns1__getTorneioResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getTorneioResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getTorneio(struct soap *soap, _ns1__getTorneio *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getTorneio))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getTorneio(struct soap *soap, const char *tag, int id, _ns1__getTorneio *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getTorneio);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getTorneio ** SOAP_FMAC4 soap_in_PointerTo_ns1__getTorneio(struct soap *soap, const char *tag, _ns1__getTorneio **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getTorneio **)soap_malloc(soap, sizeof(_ns1__getTorneio *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getTorneio *)soap_instantiate__ns1__getTorneio(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getTorneio ** p = (_ns1__getTorneio **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getTorneio, sizeof(_ns1__getTorneio), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getTorneio(struct soap *soap, _ns1__getTorneio *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__getTorneio);
	if (soap_out_PointerTo_ns1__getTorneio(soap, tag?tag:"ns1:getTorneio", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getTorneio ** SOAP_FMAC4 soap_get_PointerTo_ns1__getTorneio(struct soap *soap, _ns1__getTorneio **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getTorneio(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__setResultadosResponse(struct soap *soap, _ns1__setResultadosResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__setResultadosResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__setResultadosResponse(struct soap *soap, const char *tag, int id, _ns1__setResultadosResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__setResultadosResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__setResultadosResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__setResultadosResponse(struct soap *soap, const char *tag, _ns1__setResultadosResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__setResultadosResponse **)soap_malloc(soap, sizeof(_ns1__setResultadosResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__setResultadosResponse *)soap_instantiate__ns1__setResultadosResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__setResultadosResponse ** p = (_ns1__setResultadosResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__setResultadosResponse, sizeof(_ns1__setResultadosResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__setResultadosResponse(struct soap *soap, _ns1__setResultadosResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__setResultadosResponse);
	if (soap_out_PointerTo_ns1__setResultadosResponse(soap, tag?tag:"ns1:setResultadosResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__setResultadosResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__setResultadosResponse(struct soap *soap, _ns1__setResultadosResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__setResultadosResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__setResultados(struct soap *soap, _ns1__setResultados *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__setResultados))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__setResultados(struct soap *soap, const char *tag, int id, _ns1__setResultados *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__setResultados);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__setResultados ** SOAP_FMAC4 soap_in_PointerTo_ns1__setResultados(struct soap *soap, const char *tag, _ns1__setResultados **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__setResultados **)soap_malloc(soap, sizeof(_ns1__setResultados *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__setResultados *)soap_instantiate__ns1__setResultados(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__setResultados ** p = (_ns1__setResultados **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__setResultados, sizeof(_ns1__setResultados), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__setResultados(struct soap *soap, _ns1__setResultados *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__setResultados);
	if (soap_out_PointerTo_ns1__setResultados(soap, tag?tag:"ns1:setResultados", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__setResultados ** SOAP_FMAC4 soap_get_PointerTo_ns1__setResultados(struct soap *soap, _ns1__setResultados **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__setResultados(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfTorneio(struct soap *soap, ns1__ArrayOfTorneio *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfTorneio))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfTorneio(struct soap *soap, const char *tag, int id, ns1__ArrayOfTorneio *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfTorneio);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfTorneio ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfTorneio(struct soap *soap, const char *tag, ns1__ArrayOfTorneio **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfTorneio **)soap_malloc(soap, sizeof(ns1__ArrayOfTorneio *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfTorneio *)soap_instantiate_ns1__ArrayOfTorneio(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfTorneio ** p = (ns1__ArrayOfTorneio **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfTorneio, sizeof(ns1__ArrayOfTorneio), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfTorneio(struct soap *soap, ns1__ArrayOfTorneio *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfTorneio);
	if (soap_out_PointerTons1__ArrayOfTorneio(soap, tag?tag:"ns1:ArrayOfTorneio", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfTorneio ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfTorneio(struct soap *soap, ns1__ArrayOfTorneio **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfTorneio(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfClassificacao(struct soap *soap, ns1__ArrayOfClassificacao *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfClassificacao))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfClassificacao(struct soap *soap, const char *tag, int id, ns1__ArrayOfClassificacao *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfClassificacao);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfClassificacao ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfClassificacao(struct soap *soap, const char *tag, ns1__ArrayOfClassificacao **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfClassificacao **)soap_malloc(soap, sizeof(ns1__ArrayOfClassificacao *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfClassificacao *)soap_instantiate_ns1__ArrayOfClassificacao(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfClassificacao ** p = (ns1__ArrayOfClassificacao **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfClassificacao, sizeof(ns1__ArrayOfClassificacao), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfClassificacao(struct soap *soap, ns1__ArrayOfClassificacao *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfClassificacao);
	if (soap_out_PointerTons1__ArrayOfClassificacao(soap, tag?tag:"ns1:ArrayOfClassificacao", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfClassificacao ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfClassificacao(struct soap *soap, ns1__ArrayOfClassificacao **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfClassificacao(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__Torneio(struct soap *soap, ns1__Torneio **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__Torneio))
		soap_serialize_PointerTons1__Torneio(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__Torneio(struct soap *soap, const char *tag, int id, ns1__Torneio **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__Torneio);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__Torneio(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__Torneio *** SOAP_FMAC4 soap_in_PointerToPointerTons1__Torneio(struct soap *soap, const char *tag, ns1__Torneio ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Torneio ***)soap_malloc(soap, sizeof(ns1__Torneio **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__Torneio(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__Torneio ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__Torneio, sizeof(ns1__Torneio *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__Torneio(struct soap *soap, ns1__Torneio **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__Torneio);
	if (soap_out_PointerToPointerTons1__Torneio(soap, tag?tag:"ns1:Torneio", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Torneio *** SOAP_FMAC4 soap_get_PointerToPointerTons1__Torneio(struct soap *soap, ns1__Torneio ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__Torneio(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Torneio(struct soap *soap, ns1__Torneio *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Torneio))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Torneio(struct soap *soap, const char *tag, int id, ns1__Torneio *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Torneio);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__Torneio ** SOAP_FMAC4 soap_in_PointerTons1__Torneio(struct soap *soap, const char *tag, ns1__Torneio **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Torneio **)soap_malloc(soap, sizeof(ns1__Torneio *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Torneio *)soap_instantiate_ns1__Torneio(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__Torneio ** p = (ns1__Torneio **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Torneio, sizeof(ns1__Torneio), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Torneio(struct soap *soap, ns1__Torneio *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__Torneio);
	if (soap_out_PointerTons1__Torneio(soap, tag?tag:"ns1:Torneio", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Torneio ** SOAP_FMAC4 soap_get_PointerTons1__Torneio(struct soap *soap, ns1__Torneio **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Torneio(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__Classificacao(struct soap *soap, ns1__Classificacao **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__Classificacao))
		soap_serialize_PointerTons1__Classificacao(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__Classificacao(struct soap *soap, const char *tag, int id, ns1__Classificacao **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__Classificacao);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__Classificacao(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__Classificacao *** SOAP_FMAC4 soap_in_PointerToPointerTons1__Classificacao(struct soap *soap, const char *tag, ns1__Classificacao ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Classificacao ***)soap_malloc(soap, sizeof(ns1__Classificacao **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__Classificacao(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__Classificacao ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__Classificacao, sizeof(ns1__Classificacao *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__Classificacao(struct soap *soap, ns1__Classificacao **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__Classificacao);
	if (soap_out_PointerToPointerTons1__Classificacao(soap, tag?tag:"ns1:Classificacao", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Classificacao *** SOAP_FMAC4 soap_get_PointerToPointerTons1__Classificacao(struct soap *soap, ns1__Classificacao ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__Classificacao(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Classificacao(struct soap *soap, ns1__Classificacao *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Classificacao))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Classificacao(struct soap *soap, const char *tag, int id, ns1__Classificacao *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Classificacao);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__Classificacao ** SOAP_FMAC4 soap_in_PointerTons1__Classificacao(struct soap *soap, const char *tag, ns1__Classificacao **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Classificacao **)soap_malloc(soap, sizeof(ns1__Classificacao *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Classificacao *)soap_instantiate_ns1__Classificacao(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__Classificacao ** p = (ns1__Classificacao **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Classificacao, sizeof(ns1__Classificacao), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Classificacao(struct soap *soap, ns1__Classificacao *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__Classificacao);
	if (soap_out_PointerTons1__Classificacao(soap, tag?tag:"ns1:Classificacao", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Classificacao ** SOAP_FMAC4 soap_get_PointerTons1__Classificacao(struct soap *soap, ns1__Classificacao **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Classificacao(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
